<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HtmlToOpenXml</name>
    </assembly>
    <members>
        <member name="T:HtmlToOpenXml.HtmlAttributeCollection">
            <summary>
            Represents the collection of attributes present in the current html tag.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlAttributeCollection.Count">
            <summary>
            Gets the number of attributes for this tag.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlAttributeCollection.Item(System.String)">
            <summary>
            Gets the named attribute.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlAttributeCollection.GetAsInt(System.String)">
            <summary>
            Gets an attribute representing an integer.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlAttributeCollection.GetAsColor(System.String)">
            <summary>
            Gets an attribute representing a color (named color, hexadecimal or hexadecimal 
            without the preceding # character).
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlAttributeCollection.GetAsUnit(System.String)">
            <summary>
            Gets an attribute representing an unit: 120px, 10pt, 5em, 20%, ...
            </summary>
            <returns>If the attribute is misformed, the <see cref="P:HtmlToOpenXml.Unit.IsValid"/> property is set to false.</returns>
        </member>
        <member name="M:HtmlToOpenXml.HtmlAttributeCollection.GetAsMargin(System.String)">
            <summary>
            Gets an attribute representing the 4 unit sides.
            If a side has been specified individually, it will override the grouped definition.
            </summary>
            <returns>If the attribute is misformed, the <see cref="P:HtmlToOpenXml.Margin.IsValid"/> property is set to false.</returns>
        </member>
        <member name="M:HtmlToOpenXml.HtmlAttributeCollection.GetAsBorder(System.String)">
            <summary>
            Gets an attribute representing the 4 border sides.
            If a border style/color/width has been specified individually, it will override the grouped definition.
            </summary>
            <returns>If the attribute is misformed, the <see cref="P:HtmlToOpenXml.HtmlBorder.IsEmpty"/> property is set to false.</returns>
        </member>
        <member name="M:HtmlToOpenXml.HtmlAttributeCollection.GetAsSideBorder(System.String)">
            <summary>
            Gets an attribute representing a single border side.
            If a border style/color/width has been specified individually, it will override the grouped definition.
            </summary>
            <returns>If the attribute is misformed, the <see cref="P:HtmlToOpenXml.HtmlBorder.IsEmpty"/> property is set to false.</returns>
        </member>
        <member name="M:HtmlToOpenXml.HtmlAttributeCollection.GetAsClass">
            <summary>
            Gets the class attribute that specify one or more classnames.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlAttributeCollection.GetAsFont(System.String)">
            <summary>
            Gets the font attribute and combine with the style, size and family.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.HtmlTableSpanCollection">
            <summary>
            Typed sorted list on span in table.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.NumberingListStyleCollection.EnsureMultilevel(System.Int32)">
            <summary>
            Find a specified AbstractNum by its ID and update its definition to make it multi-level.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.NumberingListStyleCollection.LevelIndex">
            <summary>
            Gets the depth level of the current list instance.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.NumberingListStyleCollection.InstanceID">
            <summary>
            Gets the ID of the current list instance.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.OpenXmlDocumentStyleCollection">
            <summary>
            Typed collection that holds the Style of a document and their name.
            OpenXml is case-sensitive but CSS is not. This collection handles both cases.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.OpenXmlDocumentStyleCollection.TryGetValueIgnoreCase(System.String,DocumentFormat.OpenXml.Wordprocessing.StyleValues,DocumentFormat.OpenXml.Wordprocessing.Style@)">
            <summary>
            Gets the style associated with the specified name.
            </summary>
            <param name="name">The name whose style to get.</param>
            <param name="styleType">Specify the type of style seeked (Paragraph or Character).</param>
            <param name="style">When this method returns, the style associated with the specified name, if
            the key is found; otherwise, returns null. This parameter is passed uninitialized.</param>
        </member>
        <member name="T:HtmlToOpenXml.OpenXmlStyleCollectionBase">
            <summary>
            Defines the styles to apply on OpenXml elements.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.OpenXmlStyleCollectionBase.GetSequenceNumberHandler">
            <summary>
            Handler to retrieves the insert order of a child inside its parent element.
            </summary>
            <param name="child">The child to look up.</param>
            <returns>The sequence order where to insert the child.</returns>
        </member>
        <member name="F:HtmlToOpenXml.OpenXmlStyleCollectionBase.tags">
            <summary>Holds the tags to apply to the current OpenXml element.</summary>
            <remarks>The key contains the name of the tag, the values contains a list of queued attributes of the same tag.</remarks>
        </member>
        <member name="M:HtmlToOpenXml.OpenXmlStyleCollectionBase.ApplyTags(DocumentFormat.OpenXml.OpenXmlCompositeElement)">
            <summary>
            Apply all the current Html tag (Run properties) to the specified run.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.OpenXmlStyleCollectionBase.BeginTag(System.String,System.Collections.Generic.List{DocumentFormat.OpenXml.OpenXmlElement})">
            <summary>
            Add the specified tag to the list.
            </summary>
            <param name="name">The name of the tag.</param>
            <param name="elements">The Run properties to apply to the next build run until the tag is popped out.</param>
        </member>
        <member name="M:HtmlToOpenXml.OpenXmlStyleCollectionBase.BeginTag(System.String,DocumentFormat.OpenXml.OpenXmlElement[])">
            <summary>
            Add the specified tag to the list.
            </summary>
            <param name="name">The name of the tag.</param>
            <param name="elements">The Run properties to apply to the next build run until the tag is popped out.</param>
        </member>
        <member name="M:HtmlToOpenXml.OpenXmlStyleCollectionBase.MergeTag(System.String,System.Collections.Generic.List{DocumentFormat.OpenXml.OpenXmlElement})">
            <summary>
            Merge the properties with the tag of the previous level.
            </summary>
            <param name="name">The name of the tag.</param>
            <param name="elements">The properties to apply to the next build run until the tag is popped out.</param>
        </member>
        <member name="M:HtmlToOpenXml.OpenXmlStyleCollectionBase.EndTag(System.String)">
            <summary>
            Remove the specified tag from the list.
            </summary>
            <param name="name">The name of the tag.</param>
        </member>
        <member name="M:HtmlToOpenXml.OpenXmlStyleCollectionBase.SetProperties(DocumentFormat.OpenXml.OpenXmlCompositeElement,DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Insert a style element inside a RunProperties, taking care of the correct sequence order as defined in the ECMA Standard.
            </summary>
            <param name="containerProperties">A RunProperties or ParagraphProperties wherein the tag will be inserted.</param>
            <param name="tag">The style to apply to the run.</param>
        </member>
        <member name="M:HtmlToOpenXml.OpenXmlStyleCollectionBase.GetTagOrder(DocumentFormat.OpenXml.OpenXmlElement)">
            <summary>
            Resolve the element order of the children of RunProperties or ParagraphProperties.
            </summary>
            <param name="element">The child item to look up.</param>
            <returns>Returns the order of the child.</returns>
        </member>
        <member name="M:HtmlToOpenXml.ParagraphStyleCollection.ApplyTags(DocumentFormat.OpenXml.OpenXmlCompositeElement)">
            <summary>
            Apply all the current Html tag (Paragraph properties) to the specified paragrah.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.ParagraphStyleCollection.NewParagraph">
            <summary>
            Factor method to create a new Paragraph with its default style already defined.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.ParagraphStyleCollection.ProcessCommonAttributes(HtmlToOpenXml.HtmlEnumerator,System.Collections.Generic.IList{DocumentFormat.OpenXml.OpenXmlElement})">
            <summary>
            There is a few attributes shared by a large number of tags. This method will check them for a limited
            number of tags (&lt;p&gt;, &lt;pre&gt;, &lt;div&gt;, &lt;span&gt; and &lt;body&gt;).
            </summary>
            <returns>Returns true if the processing of this tag should generate a new paragraph.</returns>
        </member>
        <member name="P:HtmlToOpenXml.ParagraphStyleCollection.DefaultParagraphStyle">
            <summary>
            Gets the default StyleId to apply on the any new paragraph.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.RunStyleCollection.ApplyTags(DocumentFormat.OpenXml.OpenXmlCompositeElement)">
            <summary>
            Apply all the current Html tag (Run properties) to the specified run.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.RunStyleCollection.ProcessCommonAttributes(HtmlToOpenXml.HtmlEnumerator,System.Collections.Generic.IList{DocumentFormat.OpenXml.OpenXmlElement})">
            <summary>
            Converts some common styling attributes to their OpenXml equivalence.
            </summary>
            <param name="en">The Html parser.</param>
            <param name="styleAttributes">The collection of attributes where to store new discovered attributes.</param>
        </member>
        <member name="P:HtmlToOpenXml.RunStyleCollection.DefaultRunStyle">
            <summary>
            Gets the default StyleId to apply on the any new runs.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.TableContext">
            <summary>
            Holds the tables in the order we discover them (to support nested tables).
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.TableContext.HasContext">
            <summary>
            Tells whether the Html enumerator is currently inside any table element.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.TableContext.CellPosition">
            <summary>
            Gets or sets the position of the current processed cell in a table.
            Origins is at the top left corner.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.TableContext.RowSpan">
            <summary>
            Gets the concurrent remaining row span foreach columns (key: cell with rowSpan attribute, value: length of the span).
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.TableStyleCollection.ApplyTags(DocumentFormat.OpenXml.OpenXmlCompositeElement)">
            <summary>
            Apply all the current Html tag to the specified table cell.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.TableStyleCollection.ProcessCommonAttributes(HtmlToOpenXml.HtmlEnumerator,System.Collections.Generic.IList{DocumentFormat.OpenXml.OpenXmlElement})">
            <summary>
            Move inside the current tag related to table (td, thead, tr, ...) and converts some common
            attributes to their OpenXml equivalence.
            </summary>
            <param name="en">The Html enumerator positionned on a <i>table (or related)</i> tag.</param>
            <param name="runStyleAttributes">The collection of attributes where to store new discovered attributes.</param>
        </member>
        <member name="T:HtmlToOpenXml.AcronymPosition">
            <summary>
            Specifies the position of an acronym or abbreviation in the resulting conversion.
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.AcronymPosition.PageEnd">
            <summary>
            Position at the end of the page.
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.AcronymPosition.DocumentEnd">
            <summary>
            Position at the end of the document.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.ImageProcessing">
            <summary>
            Specifies how the &lt;img&gt; tag will be handled during the conversion.
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.ImageProcessing.Ignore">
            <summary>
            Image tag are not processed.
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.ImageProcessing.AutomaticDownload">
            <summary>
            The image will be downloaded using a classic Http request. The src attribute should
            point on an absolute uri.
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.ImageProcessing.ManualProvisioning">
            <summary>
            The image data will be provided by calling the <see cref="E:HtmlToOpenXml.HtmlConverter.ProvisionImage"/> event.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.QuoteChars">
            <summary>
            Predefined quote style as defined by the browser (used for the &lt;q&gt; tag).
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.QuoteChars.IE">
            <summary>Internet Explorer style: « abc » </summary>
        </member>
        <member name="F:HtmlToOpenXml.QuoteChars.Gecko">
            <summary>Firefox style: “abc”</summary>
        </member>
        <member name="F:HtmlToOpenXml.QuoteChars.WebKit">
            <summary>Chrome/Safari/Opera style: "abc"</summary>
        </member>
        <member name="M:HtmlToOpenXml.QuoteChars.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:HtmlToOpenXml.QuoteChars"/> class.
            </summary>
            <param name="begin">The characters at the beginning of a quote.</param>
            <param name="end">The characters at the end of a quote.</param>
        </member>
        <member name="T:HtmlToOpenXml.HtmlConverter">
            <summary>
            Helper class to convert some Html text to OpenXml elements.
            </summary>
        </member>
        <member name="E:HtmlToOpenXml.HtmlConverter.ProvisionImage">
            <summary>
            Occurs when an image tag was detected and you want to manage yourself the download of the data.
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.HtmlConverter.paragraphs">
            <summary>The list of paragraphs that will be returned.</summary>
        </member>
        <member name="F:HtmlToOpenXml.HtmlConverter.elements">
            <summary>Holds the elements to append to the current paragraph.</summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.#ctor(DocumentFormat.OpenXml.Packaging.MainDocumentPart)">
            <summary>
            Constructor.
            </summary>
            <param name="mainPart">The mainDocumentPart of a document where to write the conversion to.</param>
            <remarks>We preload some configuration from inside the document such as style, bookmarks,...</remarks>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.Parse(System.String)">
            <summary>
            Start the parse processing.
            </summary>
            <returns>Returns a list of parsed paragraph.</returns>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.ParseHtml(System.String)">
            <summary>
            Start the parse processing and append the converted paragraphs into the Body of the document.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.RemoveEmptyParagraphs">
            <summary>
            Remove empty paragraph unless 2 tables are side by side.
            These paragraph could be empty due to misformed html or spaces in the html source.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.AlternateProcessHtmlChunks(HtmlToOpenXml.HtmlEnumerator,System.String)">
            <summary>
            Save the actual list and restart with a new one.
            Continue to process until we found endTag.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.AddParagraph(DocumentFormat.OpenXml.OpenXmlCompositeElement)">
            <summary>
            Add a new paragraph, table, ... to the list of processed paragrahs. This method takes care of 
            adding the new element to the current table if it exists.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.AddFootnoteReference(System.String)">
            <summary>
            Add a note to the FootNotes part and ensure it exists.
            </summary>
            <param name="description">The description of an acronym, abbreviation, some book references, ...</param>
            <returns>Returns the id of the footnote reference.</returns>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.AddEndnoteReference(System.String)">
            <summary>
            Add a note to the Endnotes part and ensure it exists.
            </summary>
            <param name="description">The description of an acronym, abbreviation, some book references, ...</param>
            <returns>Returns the id of the endnote reference.</returns>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.AddFigureCaption">
            <summary>
            Add a new figure caption to the document.
            </summary>
            <returns>Returns the id of the new figure caption.</returns>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.CompleteCurrentParagraph(System.Boolean)">
            <summary>
            Push the elements members to the current paragraph and reset the elements collection.
            </summary>
            <param name="createNew">True to automatically create a new paragraph, stored in the instance member <see cref="F:HtmlToOpenXml.HtmlConverter.currentParagraph"/>.</param>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.RefreshStyles">
            <summary>
            Refresh the cache of styles presents in the document.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.ProcessContainerAttributes(HtmlToOpenXml.HtmlEnumerator,System.Collections.Generic.IList{DocumentFormat.OpenXml.OpenXmlElement})">
            <summary>
            There is a few attributes shared by a large number of tags. This method will check them for a limited
            number of tags (&lt;p&gt;, &lt;pre&gt;, &lt;div&gt;, &lt;span&gt; and &lt;body&gt;).
            </summary>
            <returns>Returns true if the processing of this tag should generate a new paragraph.</returns>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.ChangePageOrientation(DocumentFormat.OpenXml.Wordprocessing.PageOrientationValues)">
            <summary>
            Generate the required OpenXml element for handling page orientation.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.OnProvisionImage(HtmlToOpenXml.ProvisionImageEventArgs)">
            <summary>
            Raises the ProvisionImage event.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlConverter.AcronymPosition">
            <summary>
            Gets or sets where to render the acronym or abbreviation tag.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlConverter.ConsiderDivAsParagraph">
            <summary>
            Gets or sets whether the &lt;div&gt; tag should be processed as &lt;p&gt; (default false). It depends whether you consider &lt;div&gt;
            as part of the layout or as part of a text field.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlConverter.ExcludeLinkAnchor">
            <summary>
            Gets or sets whether anchor links are included or not in the conversion.
            </summary>
            <remarks>An anchor is a term used to define a hyperlink destination inside a document.
            <see href="http://www.w3schools.com/HTML/html_links.asp"/>.
            <br/>
            It exists some predefined anchors used by Word such as _top to refer to the top of the document.
            The anchor <i>#_top</i> is always accepted regardless this property value.
            For others anchors like refering to your own bookmark or a title, add a 
            <see cref="T:DocumentFormat.OpenXml.Wordprocessing.BookmarkStart"/> and 
            <see cref="T:DocumentFormat.OpenXml.Wordprocessing.BookmarkEnd"/> elements
            and set the value of href to <i>#&lt;name of your bookmark&gt;</i>.
            </remarks>
        </member>
        <member name="P:HtmlToOpenXml.HtmlConverter.HtmlStyles">
            <summary>
            Gets the Html styles manager mapping to OpenXml style properties.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlConverter.ImageProcessing">
            <summary>
            Gets or sets how the &lt;img&gt; tag should be handled.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlConverter.BaseImageUrl">
            <summary>
            Gets or sets the base Uri used to automaticaly resolve relative images 
            if used with ImageProcessing = AutomaticDownload.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlConverter.WebProxy">
            <summary>
            Gets or sets the proxy used to download images.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlConverter.TableCaptionPosition">
            <summary>
            Gets or sets where the Legend tag (&lt;caption&gt;) should be rendered (above or below the table).
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlConverter.RenderPreAsTable">
            <summary>
            Gets or sets whether the &lt;pre&gt; tag should be rendered as a table.
            </summary>
            <remarks>The table will contains only one cell.</remarks>
        </member>
        <member name="M:HtmlToOpenXml.HtmlConverter.ProcessHtmlElement``1(HtmlToOpenXml.HtmlEnumerator,DocumentFormat.OpenXml.OpenXmlLeafElement)">
            <summary>
            Generic handler for processing style on any Html element.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.HtmlDocumentStyle">
            <summary>
            Defines the styles to apply on OpenXml elements.
            </summary>
        </member>
        <member name="E:HtmlToOpenXml.HtmlDocumentStyle.StyleMissing">
            <summary>
            Occurs when a Style is missing in the MainDocumentPart but will be used during the conversion process.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlDocumentStyle.PrepareStyles(DocumentFormat.OpenXml.Packaging.MainDocumentPart)">
            <summary>
            Preload the styles in the document to match localized style name.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlDocumentStyle.GetStyle(System.String,DocumentFormat.OpenXml.Wordprocessing.StyleValues,System.Boolean)">
            <summary>
            Helper method to obtain the StyleId of a named style (invariant or localized name).
            </summary>
            <param name="name">The name of the style to look for.</param>
            <param name="styleType">True to obtain the character version of the given style.</param>
            <param name="ignoreCase">Indicate whether the search should be performed with the case-sensitive flag or not.</param>
            <returns>If not found, returns the given name argument.</returns>
        </member>
        <member name="M:HtmlToOpenXml.HtmlDocumentStyle.DoesStyleExists(System.String)">
            <summary>
            Gets whether the given style exists in the document.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlDocumentStyle.AddStyle(System.String,DocumentFormat.OpenXml.Wordprocessing.Style)">
            <summary>
            Add a new style inside the document and refresh the style cache.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlDocumentStyle.EnsureKnownStyle(System.String,DocumentFormat.OpenXml.Wordprocessing.Style@)">
            <summary>
            Try to insert the style in the document if it is a known style.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlDocumentStyle.DefaultParagraphStyle">
            <summary>
            Gets the default StyleId to apply on the any new paragraph.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlDocumentStyle.DefaultStyle">
            <summary>
            Gets or sets the default paragraph style to apply on any new runs.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlDocumentStyle.QuoteCharacters">
            <summary>
            Gets or sets the beginning and ending characters used in the &lt;q&gt; tag.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.HtmlEnumerator">
            <summary>
            Splits an html chunk of text and provide a way to enumerate through its tags.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlEnumerator.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlEnumerator.MoveUntilMatch(System.String)">
            <summary>
            Use as MoveNext() but this function will stop once the current value is equals to tag.
            </summary>
            <param name="tag">The tag to stop on (Optional).</param>
            <returns>
            If tag is null, it returns true if the enumerator was successfully advanced to the next element; false
            if the enumerator has passed the end of the collection.<br/>
            If tag is not null, it returns false as long as the tag was not found.
            </returns>
        </member>
        <member name="P:HtmlToOpenXml.HtmlEnumerator.StyleAttributes">
            <summary>
            Gets an attribute in the Style attribute of a Html tag.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlEnumerator.Attributes">
            <summary>
            Gets an attribute from a Html tag.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlEnumerator.IsCurrentHtmlTag">
            <summary>
            Gets whether the current element is an Html tag or not.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlEnumerator.IsSelfClosedTag">
            <summary>
            Gets whether the current element is an Html tag that is closed (example: &lt;td/&gt;).
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlEnumerator.CurrentTag">
            <summary>
            If <see cref="P:HtmlToOpenXml.HtmlEnumerator.Current"/> property is a Html tag, it returns the name of that tag.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlEnumerator.ClosingCurrentTag">
            <summary>
            Gets the expected closing tag for the current tag.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlEnumerator.Current">
            <summary>
            Gets the line or tag at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.CellPosition">
            <summary>
            Represents the location of cell in a table (2d matrix).
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.CellPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref='T:HtmlToOpenXml.CellPosition'/> class from
            the specified location.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.CellPosition.Offset(System.Int32,System.Int32)">
            <summary>
            Translates this position by the specified amount.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.CellPosition.Row">
            <summary>
            Gets the horizontal coordinate of this position.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.CellPosition.Column">
            <summary>
            Gets the vertical coordinate of this position.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.DataUri">
            <summary>
            Represents an URI that includes inline data as if they were external resources.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.DataUri.IsWellFormed(System.String)">
            <summary>
            Indicates whether the string is well-formed by attempting to construct a DataUri with the string.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.DataUri.Mime">
            <summary>
            Gets the MIME type of the encoded data.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.DataUri.Data">
            <summary>
            Gets the decoded data.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.FontStyle">
            <summary>
            Specifies the font style for a text.
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.FontStyle.Italic">
            <summary>
            Displays an italic font style.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.FontVariant">
            <summary>
            Specifies the variation of letters for a font.
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.FontVariant.SmallCaps">
            <summary>
            In a small-caps font, all lowercase letters are converted to uppercase letters.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.FontWeight">
            <summary>
            Specifies how thick or thin characters in text should be displayed.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.HtmlBorder">
            <summary>
            Represents a Html Border with the 4 sides.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlBorder.Bottom">
            <summary>
            Gets or sets the border of the bottom side.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlBorder.Left">
            <summary>
            Gets or sets the border of the left side.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlBorder.Top">
            <summary>
            Gets or sets the border of the top side.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlBorder.Right">
            <summary>
            Gets or sets the border of the right side.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlBorder.IsEmpty">
            <summary>
            Gets whether at least one side has been specified.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.HtmlColor">
            <summary>
            Represents an ARGB color.
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.HtmlColor.Empty">
            <summary>
            Represents a color that is null.
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.HtmlColor.Black">
            <summary>
            Gets a system-defined color that has an ARGB value of #FF000000.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlColor.Parse(System.String)">
            <summary>
            Try to parse a value (RGB(A) or HSL(A), hexadecimal, or named color) to its RGB representation.
            </summary>
            <param name="htmlColor">The color to parse.</param>
            <returns>Returns <see cref="F:HtmlToOpenXml.HtmlColor.Empty"/> if parsing failed.</returns>
        </member>
        <member name="M:HtmlToOpenXml.HtmlColor.ParsePercent(System.String)">
            <summary>
            Convert a potential percentage value to its numeric representation.
            Saturation and Lightness can contains both a percentage value or a value comprised between 0.0 and 1.0. 
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlColor.FromArgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a <see cref="T:HtmlToOpenXml.HtmlColor"/> structure from the four RGB component values.
            </summary>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
        </member>
        <member name="M:HtmlToOpenXml.HtmlColor.FromArgb(System.Double,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a <see cref="T:HtmlToOpenXml.HtmlColor"/> structure from the four ARGB component values.
            </summary>
            <param name="alpha">The alpha component (0.0-1.0).</param>
            <param name="red">The red component (0-255).</param>
            <param name="green">The green component (0-255).</param>
            <param name="blue">The blue component (0-255).</param>
        </member>
        <member name="M:HtmlToOpenXml.HtmlColor.FromHsl(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Convert a color using the HSL to RGB.
            </summary>
            <param name="alpha">The alpha component (0.0-1.0).</param>
            <param name="hue">The Hue component (0.0 - 360.0).</param>
            <param name="saturation">The saturation component (0.0 - 1.0).</param>
            <param name="luminosity">The luminosity component (0.0 - 1.0).</param>
        </member>
        <member name="M:HtmlToOpenXml.HtmlColor.Equals(HtmlToOpenXml.HtmlColor)">
            <summary>
            Tests whether the specified object is a HtmlColor structure and is equivalent to this color structure.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlColor.ToHexString">
            <summary>
            Convert a .Net Color to a hex string.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HtmlColor.ToString">
            <summary>
            Gets a representation of this color expressed in ARGB.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlColor.A">
            <summary>Gets the alpha component value of this color structure.</summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlColor.R">
            <summary>Gets the red component value of this cColor structure.</summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlColor.G">
            <summary>Gets the green component value of this color structure.</summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlColor.B">
            <summary>Gets the blue component value of this color structure.</summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlColor.IsEmpty">
            <summary>
            Specifies whether this HtmlColor structure is uninitialized.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.HtmlFont">
            <summary>
            Represents a Html font (15px arial,sans-serif).
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.HtmlFont.Empty">
            <summary>Represents an empty font (not defined).</summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlFont.Family">
            <summary>
            Gets or sets the name of this font.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlFont.Style">
            <summary>
            Gest or sets the style for the text.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlFont.Variant">
            <summary>
            Gets or sets the variation of the characters.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlFont.Size">
            <summary>
            Gets or sets the size of the font, expressed in half points.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlFont.Weight">
            <summary>
            Gets or sets the weight of the characters (thin or thick).
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlFont.IsEmpty">
            <summary>
            Gets whether the border is well formed and not empty.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.HtmlImageInfo">
            <summary>
            Represents an image and its metadata.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlImageInfo.Size">
            <summary>
            Gets or sets the size of the image
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlImageInfo.RawData">
            <summary>
            Gets or sets the binary data of the image could read.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HtmlImageInfo.Type">
            <summary>
            Gets or sets the format of the image.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.Margin">
            <summary>
            Represents a Html Unit (ie: 120px, 10em, ...).
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.Margin.Parse(System.String)">
            <summary>
            Parse the margin style attribute.
            </summary>
            <remarks>
            The margin property can have from one to four values.
            <b>margin:25px 50px 75px 100px;</b>
            top margin is 25px
            right margin is 50px
            bottom margin is 75px
            left margin is 100px
            
            <b>margin:25px 50px 75px;</b>
            top margin is 25px
            right and left margins are 50px
            bottom margin is 75px
            
            <b>margin:25px 50px;</b>
            top and bottom margins are 25px
            right and left margins are 50px
            
            <b>margin:25px;</b>
            all four margins are 25px
            </remarks>
        </member>
        <member name="P:HtmlToOpenXml.Margin.Bottom">
            <summary>
            Gets or sets the unit of the bottom side.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Margin.Left">
            <summary>
            Gets or sets the unit of the left side.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Margin.Top">
            <summary>
            Gets or sets the unit of the top side.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Margin.Right">
            <summary>
            Gets or sets the unit of the right side.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Margin.IsEmpty">
            <summary>
            Gets whether at least one side has been specified.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.SideBorder">
            <summary>
            Represents a Html Unit (ie: 120px, 10em, ...).
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.SideBorder.Empty">
            <summary>Represents an empty border (not defined).</summary>
        </member>
        <member name="P:HtmlToOpenXml.SideBorder.Style">
            <summary>
            Gets or sets the type of border (solid, dashed, dotted, ...)
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.SideBorder.Color">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.SideBorder.Width">
            <summary>
            Gets or sets the size of the border expressed with its unit.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.SideBorder.IsValid">
            <summary>
            Gets whether the border is well formed and not empty.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.Size">
            <summary>
            Represents a dimension in 2D coordinate space.
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.Size.Empty">
            <summary>
            Initializes a new instance of the <see cref='T:HtmlToOpenXml.Size'/> class.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref='T:HtmlToOpenXml.Size'/> class from
            the specified dimensions.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Size.IsEmpty">
            <summary>
            Tests whether this size has zero width and height.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Size.Width">
            <summary>
            Represents the horizontal component of this size.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Size.Height">
            <summary>
            Represents the vertical component of this size.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.TextDecoration">
            <summary>
            Specifies some decoration to apply to a text.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.Unit">
            <summary>
            Represents a Html Unit (ie: 120px, 10em, ...).
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.Unit.Empty">
            <summary>Represents an empty unit (not defined).</summary>
        </member>
        <member name="F:HtmlToOpenXml.Unit.Auto">
            <summary>Represents an Auto unit.</summary>
        </member>
        <member name="M:HtmlToOpenXml.Unit.ComputeInEmus(HtmlToOpenXml.UnitMetric,System.Double)">
            <summary>
            Gets the value expressed in the English Metrics Units.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Unit.Type">
            <summary>
            Gets the type of unit (pixel, percent, point, ...)
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Unit.Value">
            <summary>
            Gets the value of this unit.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Unit.ValueInEmus">
            <summary>
            Gets the value expressed in English Metrics Unit.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Unit.ValueInDxa">
            <summary>
            Gets the value expressed in Dxa unit.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Unit.ValueInPx">
            <summary>
            Gets the value expressed in Pixel unit.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Unit.ValueInPoint">
            <summary>
            Gets the value expressed in Point unit.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Unit.IsValid">
            <summary>
            Gets whether the unit is well formed and not empty.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Unit.IsFixed">
            <summary>
            Gets whether the unit is well formed and not absolute nor auto.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.UnitMetric">
            <summary>
            Specifies the measurement values of a Html Unit.
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.UnitMetric.EM">
            <summary>1em is equal to the current font size.</summary>
        </member>
        <member name="F:HtmlToOpenXml.UnitMetric.Ex">
            <summary>one ex is the x-height of a font (x-height is usually about half the font-size)</summary>
        </member>
        <member name="F:HtmlToOpenXml.UnitMetric.Auto">
            <summary>Not convertible to any other units.</summary>
        </member>
        <member name="T:HtmlToOpenXml.PredefinedStyles">
            <summary>
            Helper class to get chunks of OpenXml predefined style.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.PredefinedStyles.GetOuterXml(System.String)">
            <summary>
            Retrieves the embedded resource.
            </summary>
            <param name="styleName">The key name of the resource to find.</param>
        </member>
        <member name="P:HtmlToOpenXml.PredefinedStyles.ResourceManager">
            <summary>
            Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.ProvisionImageEventArgs">
            <summary>
            The event arguments used for a ProvisionImage event.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.ProvisionImageEventArgs.Provision(System.Byte[])">
            <summary>
            Sets the binary content of the image, provided by yourself.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.ProvisionImageEventArgs.ImageUrl">
            <summary>
            Gets the value of the href tag.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.ProvisionImageEventArgs.ImageExtension">
            <summary>
            Gets or sets the format of the image.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.ProvisionImageEventArgs.ImageSize">
            <summary>
            Gets or sets the width and height (in pixels) of the image as it should be displayed in the document.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.ProvisionImageEventArgs.Cancel">
            <summary>
            Assigns to true to ignore this image.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.StyleEventArgs">
            <summary>
            The event arguments used for a StyleMissing event.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.StyleEventArgs.Name">
            <summary>
            Gets the invariant name of the style.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.StyleEventArgs.StyleDefinitionsPart">
            <summary>
            Gets the styles definition part located inside MainDocumentPart.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.StyleEventArgs.Type">
            <summary>
            Gets the type of style seeked (character or paragraph).
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.Converter">
            <summary>
            Provides some utilies methods for translating Http attributes to OpenXml elements.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.Converter.ToParagraphAlign(System.String)">
            <summary>
            Convert the Html text align attribute (horizontal alignement) to its corresponding OpenXml value.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.Converter.ToVAlign(System.String)">
            <summary>
            Convert the Html vertical-align attribute to its corresponding OpenXml value.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.Converter.ToFontSize(System.String)">
            <summary>
            Convert Html regular font-size to OpenXml font value (expressed in point).
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.HtmlColorTranslator">
            <summary>
            Helper class to translate a named color to its ARGB representation.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.ImageHeader">
            <summary>
            Taken from http://stackoverflow.com/questions/111345/getting-image-dimensions-without-reading-the-entire-file/111349
            Minor improvements including supporting unsigned 16-bit integers when decoding Jfif and added logic
            to load the image using new Bitmap if reading the headers fails
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.ImageHeader.GetDimensions(System.IO.Stream)">
            <summary>
            Gets the dimensions of an image.
            </summary>
            <param name="stream">The content of the image.</param>
            <returns>The dimensions of the specified image.</returns>
            <exception cref="T:System.ArgumentException">The image was of an unrecognised format.</exception>
        </member>
        <member name="M:HtmlToOpenXml.ImageHeader.KeepAspectRatio(HtmlToOpenXml.Size,HtmlToOpenXml.Size)">
            <summary>
            Resize an image keeping its aspect ratio.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.ImageHeader.DetectFileType(HtmlToOpenXml.SequentialBinaryReader)">
            <summary>
            Examines the a file's first bytes and estimates the file's type.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.ImageHeader.StartsWith(System.Byte[],System.Byte[])">
            <summary>
            Determines whether the beginning of this byte array instance matches the specified byte array.
            </summary>
            <returns>Returns true if the first array starts with the bytes of the second array.</returns>
        </member>
        <member name="T:HtmlToOpenXml.ImageProvisioningProvider">
            <summary>
            Download and provison the metadata of a requested image.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.ImageProvisioningProvider.DownloadData(System.Uri)">
            <summary>
            Download the remote or local image located at the specified url.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.ImageProvisioningProvider.DownloadData(HtmlToOpenXml.DataUri)">
            <summary>
            Decrypt the given inline DataUri.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.ImageProvisioningProvider.Provision(HtmlToOpenXml.HtmlImageInfo,System.Uri)">
            <summary>
            Discover the metadata of the image.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.ImageProvisioningProvider.InspectMimeType(System.String)">
            <summary>
            Inspect the response headers of a web request and decode the mime type if provided
            </summary>
            <returns>Returns the extension of the image if provideds.</returns>
        </member>
        <member name="M:HtmlToOpenXml.ImageProvisioningProvider.GetImagePartTypeForImageUrl(System.Uri)">
            <summary>
            Gets the OpenXml ImagePartType associated to an image.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.ImageProvisioningProvider.GetImageSize(System.IO.Stream)">
            <summary>
            Loads an image from a stream and grab its size.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.SequentialBinaryReader">
            <summary>
            Reads primitive data types as binary values with endianness support.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.SequentialBinaryReader.Skip(System.Int32)">
            <summary>
            Skips forward in the sequence.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.Logging">
            <summary>
            Logging class to trace debugging information during the conversion process.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.Logging.Initialize">
            <summary>
            Initialize the logger from the app.config.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.Logging.PrintLine(System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Core method to write in the log.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.Logging.OnDomainUnload(System.Object,System.EventArgs)">
            <summary>
            Event handler to close properly the trace source when the program is shut down.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.Logging.ValidateSettings(System.Diagnostics.TraceEventType)">
            <summary>
            Ensure the type of event should be traced, regarding the configuration.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.Logging.On">
            <summary>
            Gets whether the tracing is enabled or not.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.BackChannels">
            <summary>
            Shared the BackChannel to connect to the download external resources.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.BackChannels.HttpClient">
            <summary>
            Gets the shared Http client.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.BackChannels.CreateWebRequest(System.Uri,HtmlToOpenXml.WebProxy)">
            <summary>
            Process the download of a Http resource.
            </summary>
            <param name="requestUri">The remote endpoint to retrieve.</param>
            <param name="proxy">The configuration <see cref="P:HtmlToOpenXml.HtmlConverter.WebProxy"/> for this http request.</param>
        </member>
        <member name="T:HtmlToOpenXml.HttpResponse">
            <summary>
            Represents a downloaded resource.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HttpResponse.Body">
            <summary>
            Gets or sets the binary response body.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.HttpResponse.ContentType">
            <summary>
            Gets or sets the content type of the response.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.HttpUtility">
            <summary>
            Helper class that can be found in System.Web.HttpUtility. This class allows us to avoid a reference to System.Web.
            </summary>
        </member>
        <member name="F:HtmlToOpenXml.HttpUtility.WhiteSpaces">
            <summary>The common characters considered as white space.</summary>
        </member>
        <member name="M:HtmlToOpenXml.HttpUtility.HtmlDecode(System.String)">
            <summary>
            Converts a string that has been HTML-encoded for HTTP transmission into a decoded string.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Converts a string that has been HTML-encoded into a decoded string, and sends
            the decoded string to a System.IO.TextWriter output stream.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HttpUtility.UrlDecode(System.String)">
            <summary>
            Converts a string that represents an Html-encoded URL to a decoded string.
            </summary>
        </member>
        <member name="M:HtmlToOpenXml.HttpUtility.IsLegalXmlChar(System.Int32)">
            <summary>
            Gets whether a given character is allowed by XML 1.0.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.OpenXmlExtension">
            <summary>
            Helper class that provide some extension methods to OpenXml SDK.
            </summary>
        </member>
        <member name="T:HtmlToOpenXml.WebProxy">
            <summary>
            Represents the configuration used to download some data such as the images.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.WebProxy.Credentials">
            <summary>
            Gets or sets the credentials to submit to the proxy server for authentication.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.WebProxy.Proxy">
            <summary>
            Gets or sets the proxy access.
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.WebProxy.Cookies">
            <summary>
            Gets or sets the collection of authorization ticket cookie (mainly for Claims authentication).
            </summary>
        </member>
        <member name="P:HtmlToOpenXml.WebProxy.HttpRequestHeaders">
            <summary>
            Gets or sets the Http headers that will be sent when requesting an image.
            </summary>
        </member>
    </members>
</doc>
