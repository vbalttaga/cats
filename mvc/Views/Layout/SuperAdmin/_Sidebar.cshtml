@using Weblib.Models
@using GofraLib.Tools.AdminArea
<!-- Left side column. contains the logo and sidebar -->
<aside class="main-sidebar">
    <!-- sidebar: style can be found in sidebar.less -->
    <section class="sidebar">
        <!-- Sidebar user panel -->
        <div class="user-panel">
            <div class="pull-left image">
                <img src="@(LIB.Tools.Security.Authentication.GetCurrentUser().Image.Thumbnail!=""?LIB.Tools.Security.Authentication.GetCurrentUser().Image.Thumbnail:LIB.Tools.Utils.URLHelper.GetUrl(@"Images\placeholders\UserPlaceHolder.png"))" class="img-circle" alt="User Image">
            </div>
            <div class="pull-left info">
                <p>@(LIB.Tools.Security.Authentication.GetCurrentUser().Person.FirstName + " " + LIB.Tools.Security.Authentication.GetCurrentUser().Person.LastName)</p>
                <a href="#"><i class="fa fa-circle text-success"></i> Online</a>
            </div>
        </div>
        <!-- search form -->
        <form action="#" method="get" class="sidebar-form">
            <div class="input-group">
                <input type="text" name="q" class="form-control" placeholder="Search...">
                <span class="input-group-btn">
                    <button type="submit" name="search" id="search-btn" class="btn btn-flat"><i class="fa fa-search"></i></button>
                </span>
            </div>
        </form>
        <!-- /.search form -->
        <!-- sidebar menu: : style can be found in sidebar.less -->
        <ul class="sidebar-menu">
            <li class="header">NAVIGARE</li>
            <li class="@(ViewData["BOType"]==null?"active ":"")treeview">
                <a href="@LIB.Tools.Utils.URLHelper.GetUrl("SystemManagement/DashBoard/")">
                    <i class="fa fa-dashboard"></i> <span>Dashboard</span> <i class="fa pull-right"></i>
                </a>
            </li>
            @{ var TypeList = (Dictionary<LIB.Tools.AdminArea.AdminAreaGroupenum, List<LIB.BusinessObjects.BusinessObject>>)ViewData["TypeList"];}
            @{ var CurrentType = (Type)ViewData["BOType"];}
            @{ var ParentType = (Type)ViewData["BOLinkType"];}
            @foreach (AdminAreaGroup group in AdminAreaGroup.Groups.Values)
            {
                if (TypeList.ContainsKey(group.Group) && group.Parent == null)
                {
                    var activeTab = false;
                    activeTab = (CurrentType != null && TypeList[group.Group].Any(bo => bo.Type == CurrentType));
                    if (!activeTab && AdminAreaGroup.Groups.Values.Any(g => g.Parent == group.Parent)) // not top group
                    {
                        var subGrups = AdminAreaGroup.Groups.Values.Where(g => g.Parent != null && g.Parent.Group == group.Group);
                        foreach (AdminAreaGroup subgroup in subGrups)
                        {
                            if ((CurrentType != null && TypeList[subgroup.Group].Any(bo => bo.Type == CurrentType)))
                            {
                                activeTab = true;
                                break;
                            }
                        }
                    }
                    if (!activeTab)
                    {
                        activeTab = (ParentType != null && TypeList[group.Group].Any(bo => bo.Type == ParentType));
                    }
                    if (!activeTab && AdminAreaGroup.Groups.Values.Any(g => g.Parent == group.Parent)) // not top group
                    {
                        var subGrups = AdminAreaGroup.Groups.Values.Where(g => g.Parent != null && g.Parent.Group == group.Group);
                        foreach (AdminAreaGroup subgroup in subGrups)
                        {
                            if ((ParentType != null && TypeList[subgroup.Group].Any(bo => bo.Type == ParentType)))
                            {
                                activeTab = true;
                                break;
                            }
                        }
                    }
                    <li class="@(activeTab ? "active " : "")treeview">
                        <a href="#">
                            <i class="fa fa-@(group.Icon)"></i>
                            <span>@(group.Name)</span>
                            <i class="fa fa-angle-left pull-right"></i>
                        </a>
                        <ul class="treeview-menu">
                            @foreach (var bo in TypeList[group.Group])
                            {
                                <li @if ((CurrentType != null && bo.Type == CurrentType) || (ParentType != null && bo.Type == ParentType)) { @: class="active"
                                                                                                                                                }>
                                    <a href="@LIB.Tools.Utils.URLHelper.GetUrl("SystemManagement\\Edit\\")@(bo.Type.Name)\@(HttpUtility.UrlEncode(bo.Type.Namespace))">
                                        <i class="fa fa-@(bo.Properties.Icon)"></i>@(bo.Properties != null && !string.IsNullOrEmpty(bo.Properties.DisplayName) ? bo.Properties.DisplayName : bo.Type.Name)
                                    </a>
                                </li>
                            }
                            @if (AdminAreaGroup.Groups.Values.Any(g => g.Parent == group.Parent))
                            {
                                var subGrups = AdminAreaGroup.Groups.Values.Where(g => g.Parent != null && g.Parent.Group == group.Group);
                                foreach (AdminAreaGroup subgroup in subGrups)
                                {
                                    if (TypeList.ContainsKey(subgroup.Group))
                                    {
                                        var subactiveTab = false;
                                        subactiveTab = (CurrentType != null && TypeList[subgroup.Group].Any(bo => bo.Type == CurrentType));
                                        if (!subactiveTab)
                                        {
                                            subactiveTab = (ParentType != null && TypeList[subgroup.Group].Any(bo => bo.Type == ParentType));
                                        }
                                        <li class="@(subactiveTab ? "active " : "")treeview">
                                            <a href="#">
                                                <i class="fa fa-@(subgroup.Icon)"></i>
                                                <span>@(subgroup.Name)</span>
                                                <i class="fa fa-angle-left pull-right"></i>
                                            </a>
                                            <ul class="treeview-menu">
                                                @foreach (var bo in TypeList[subgroup.Group])
                                                {
                                                    <li @if ((CurrentType != null && bo.Type == CurrentType) || (ParentType != null && bo.Type == ParentType)) { @: class="active"
                                                                                                                                                                                                                                                                                                                                                                                }>
                                                        <a href="@LIB.Tools.Utils.URLHelper.GetUrl("SystemManagement\\Edit\\")@(bo.Type.Name)\@(HttpUtility.UrlEncode(bo.Type.Namespace))">
                                                            <i class="fa fa-@(bo.Properties.Icon)"></i>@(bo.Properties != null && !string.IsNullOrEmpty(bo.Properties.DisplayName) ? bo.Properties.DisplayName : bo.Type.Name)
                                                        </a>
                                                    </li>
                                                }
                                            </ul>
                                        </li>
                                    }
                                }
                            }
                        </ul>
                    </li>
                }
            }
            <li class="treeview">
                <a href="#"><i class="fa fa-book"></i> <span>@Gofra.Helpers.T.Str("Documentation","BO","Documentație")</span></a>
                <ul class="treeview-menu">
                    <li>
                        <a target="_blank" href="@LIB.Tools.Utils.URLHelper.GetUrl("Documents\\Manual_Sectia.pdf")">
                            <i class="fa fa-info"></i><span>Ghidul Utilizatior</span>
                        </a>
                    </li>
                    <li>
                        <a target="_blank" href="@LIB.Tools.Utils.URLHelper.GetUrl("Documents\\Manual_Registratura.pdf")">
                            <i class="fa fa-info"></i><span>Ghidul Registratura</span>
                        </a>
                    </li>
                    <li>
                        <a target="_blank" href="@LIB.Tools.Utils.URLHelper.GetUrl("Documents\\Manual_Control_Panel.pdf")">
                            <i class="fa fa-info"></i><span>Ghidul Administrator</span>
                        </a>
                    </li>
                </ul>
            </li>
        </ul>
    </section>
    <!-- /.sidebar -->
</aside>